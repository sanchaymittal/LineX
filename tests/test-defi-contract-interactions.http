# LineX DeFi Contract Interaction Tests
# Tests that require real contract interactions with signatures
# 
# IMPORTANT: These tests require proper EIP-712 signatures
# The signatures must be generated using the correct domain and types
# 
# Required for testing:
# 1. Private key for test wallet
# 2. EIP-712 signature generation tool
# 3. Test USDT tokens in wallet
# 4. Gas payer account funded with KAIA

@baseUrl = http://localhost:3000
@testUser = 0x85C648D862c8aD6A1000D53F1520240FD3C1c165
@testRecipient = 0x1234567890123456789012345678901234567890

###############################################################################
# 1. FAUCET OPERATIONS (Requires EIP-712 Signature)
###############################################################################

### Claim faucet tokens (100 USDT)
# REQUIRES: EIP-712 signature with:
# - Domain: { name: 'LineX Faucet', version: '1', chainId: 1001, verifyingContract: USDT_ADDRESS }
# - Types: FaucetClaim { user: address, amount: uint256, message: string }
# - Values: { user: testUser, amount: 100000000 (100 USDT with 6 decimals), message: 'Claim 100 USDT from LineX faucet for <address>' }
POST {{baseUrl}}/api/v1/wallet/faucet
Content-Type: application/json

{
  "userAddress": "{{testUser}}",
  "message": "Claim 100 USDT from LineX faucet for {{testUser}}",
  "signature": "SIGNATURE_NEEDED_FROM_USER"
}

###############################################################################
# 2. SY VAULT OPERATIONS (Requires signatures and approvals)
###############################################################################

### Deposit USDT to SY Vault
# REQUIRES: 
# 1. USDT approval for SY_VAULT address OR EIP-2612 permit signature
# 2. EIP-712 signature for deposit authorization
# - Domain: { name: 'LineX', version: '1', chainId: 1001, verifyingContract: SY_VAULT }
# - Types: DeFiDeposit { user: address, amount: uint256, vault: address, nonce: uint256, deadline: uint256 }
POST {{baseUrl}}/api/v1/defi/vault/deposit
Content-Type: application/json

{
  "user": "{{testUser}}",
  "amount": "1000000",
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

### Withdraw from SY Vault
# REQUIRES: EIP-712 signature for withdrawal authorization
# - Domain: { name: 'LineX', version: '1', chainId: 1001, verifyingContract: SY_VAULT }
# - Types: DeFiWithdraw { user: address, shares: uint256, vault: address, nonce: uint256, deadline: uint256 }
POST {{baseUrl}}/api/v1/defi/vault/withdraw
Content-Type: application/json

{
  "user": "{{testUser}}",
  "shares": "1000000",
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

###############################################################################
# 3. PYT/NYT YIELD SPLITTING (Requires signatures)
###############################################################################

### Split SY shares into PYT + NYT tokens
# REQUIRES: EIP-712 signature
# - Domain: { name: 'LineX', version: '1', chainId: 1001, verifyingContract: YIELD_ORCHESTRATOR }
# - Types: YieldSplit { user: address, syShares: uint256, orchestrator: address, nonce: uint256, deadline: uint256 }
POST {{baseUrl}}/api/v1/defi/yield/split
Content-Type: application/json

{
  "user": "{{testUser}}",
  "syShares": "1000000",
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

### Recombine PYT + NYT back to SY shares
# REQUIRES: EIP-712 signature
# - Domain: { name: 'LineX', version: '1', chainId: 1001, verifyingContract: YIELD_ORCHESTRATOR }
# - Types: YieldRecombine { user: address, pytAmount: uint256, nytAmount: uint256, orchestrator: address, nonce: uint256, deadline: uint256 }
POST {{baseUrl}}/api/v1/defi/yield/recombine
Content-Type: application/json

{
  "user": "{{testUser}}",
  "pytAmount": "500000",
  "nytAmount": "500000",
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

###############################################################################
# 4. YIELD CLAIMING (Requires signatures)
###############################################################################

### Claim accumulated PYT yield
# REQUIRES: EIP-712 signature
# - Domain: { name: 'LineX', version: '1', chainId: 1001, verifyingContract: PYT_TOKEN }
# - Types: YieldClaim { user: address, token: address, amount: uint256, nonce: uint256, deadline: uint256 }
POST {{baseUrl}}/api/v1/defi/yield/claim
Content-Type: application/json

{
  "user": "{{testUser}}",
  "amount": "100000",
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

### Trigger yield distribution (requires permission)
# REQUIRES: EIP-712 signature from authorized distributor
# - Domain: { name: 'LineX', version: '1', chainId: 1001, verifyingContract: YIELD_ORCHESTRATOR }
# - Types: YieldDistribution { orchestrator: address, nonce: uint256, deadline: uint256 }
POST {{baseUrl}}/api/v1/defi/yield/distribute
Content-Type: application/json

{
  "signature": "SIGNATURE_NEEDED_FROM_AUTHORIZED_DISTRIBUTOR",
  "nonce": 1,
  "deadline": 1999999999
}

###############################################################################
# 5. PORTFOLIO OPERATIONS (Not yet implemented - contracts pending)
###############################################################################

### Create portfolio (will fail - not implemented)
POST {{baseUrl}}/api/v1/defi/portfolio/create
Content-Type: application/json

{
  "user": "{{testUser}}",
  "allocations": [
    { "vault": "SY_VAULT", "percentage": 50 },
    { "vault": "PYT_TOKEN", "percentage": 25 },
    { "vault": "NYT_TOKEN", "percentage": 25 }
  ],
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

###############################################################################
# 6. AUTO-COMPOUND OPERATIONS (Requires signatures)
###############################################################################

### Enable auto-compounding
# REQUIRES: EIP-712 signature
POST {{baseUrl}}/api/v1/defi/autocompound/enable
Content-Type: application/json

{
  "user": "{{testUser}}",
  "frequency": 86400,
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

### Disable auto-compounding
# REQUIRES: EIP-712 signature
POST {{baseUrl}}/api/v1/defi/autocompound/disable
Content-Type: application/json

{
  "user": "{{testUser}}",
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

###############################################################################
# 7. GASLESS TRANSFER (Core LineX feature)
###############################################################################

### Execute gasless USDT transfer
# REQUIRES: EIP-712 signature
# - Domain: { name: 'LineX Transfer', version: '1', chainId: 1001, verifyingContract: USDT_ADDRESS }
# - Types: Transfer { from: address, to: address, amount: uint256, nonce: uint256, deadline: uint256 }
POST {{baseUrl}}/api/v1/transfer
Content-Type: application/json

{
  "from": "{{testUser}}",
  "to": "{{testRecipient}}",
  "amount": 10,
  "signature": "SIGNATURE_NEEDED_FROM_USER",
  "nonce": 1,
  "deadline": 1999999999
}

###############################################################################
# SIGNATURE GENERATION REQUIREMENTS
###############################################################################
# 
# To run these tests, you need to generate EIP-712 signatures with:
# 
# 1. Install ethers.js or use a signing tool
# 2. Use the correct domain parameters for each operation
# 3. Sign with the private key of the test user
# 
# Example signature generation script needed:
# ```javascript
# const { ethers } = require('ethers');
# 
# const signer = new ethers.Wallet(PRIVATE_KEY);
# 
# const domain = {
#   name: 'LineX',
#   version: '1',
#   chainId: 1001,
#   verifyingContract: CONTRACT_ADDRESS
# };
# 
# const types = {
#   YieldSplit: [
#     { name: 'user', type: 'address' },
#     { name: 'syShares', type: 'uint256' },
#     { name: 'orchestrator', type: 'address' },
#     { name: 'nonce', type: 'uint256' },
#     { name: 'deadline', type: 'uint256' }
#   ]
# };
# 
# const value = {
#   user: userAddress,
#   syShares: amount,
#   orchestrator: orchestratorAddress,
#   nonce: 1,
#   deadline: Math.floor(Date.now() / 1000) + 3600
# };
# 
# const signature = await signer.signTypedData(domain, types, value);
# ```
#
# CONTRACT ADDRESSES NEEDED:
# - USDT: 0x2d889aAAD5F81e9eBc4D14630d7C14F1CE6878dD
# - SY_VAULT: 0x13cFf25b9ce2F409b7e96F7C572234AF8e060420
# - PYT_TOKEN: 0x697c8e45e86553A075bFA7DaBDb3C007d9E468Ab
# - NYT_TOKEN: 0xe10b7374a88139104F0A5Ac848E7C95291F1FA39
# - YIELD_ORCHESTRATOR: 0x8AcE67656eaf0442886141A10DF2Ea3f9862bA11
#
###############################################################################